import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'fabric-loom' version '0.5-SNAPSHOT'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '5.2.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// https://mvnrepository.com/artifact/org.apache.commons/commons-pool2
	compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.8.1'

	// Fabric API. This is technically optional, but you probably want it anyway.
	// modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.

}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

shadowJar {
	archiveClassifier = "all-dev"
	dependencies {
		exclude(dependency('com.mojang::'))
		exclude(dependency('net.fabricmc::'))
		exclude(dependency('net.fabricmc.fabric-api::'))
		exclude(dependency('net.minecraft::'))
		exclude(dependency('oshi-project::'))
		exclude(dependency('com.ibm.icu::'))
		exclude(dependency('net.java.dev.jna::'))
		exclude(dependency('net.sf.jopt-simple::'))
		exclude(dependency('io.netty::'))
		exclude(dependency('com.google.guava::'))
		exclude(dependency('org.apache.commons:commons-lang3:'))
		exclude(dependency('org.apache.commons:commons-compress:'))
		exclude(dependency('commons-io::'))
		exclude(dependency('commons-codec::'))
		exclude(dependency('net.java.jinput::'))
		exclude(dependency('net.java.jutils::'))
		exclude(dependency('com.google.code.gson::'))
		exclude(dependency('org.apache.httpcomponents:httpclient:'))
		exclude(dependency('org.apache.httpcomponents:httpcore:'))
		exclude(dependency('commons-logging::'))
		exclude(dependency('it.unimi.dsi::'))
		exclude(dependency('org.apache.logging.log4j::'))
		exclude(dependency('org.lwjgl::'))
		exclude(dependency('com.google.jimfs::'))
		exclude(dependency('org.ow2.asm::'))
		exclude(dependency('net.minecrell::'))
		exclude(dependency('org.jline::'))
	}
	exclude "mappings/"
}

task("remapShadowJar", type: RemapJarTask, dependsOn: shadowJar) {
	input = shadowJar.archiveFile
	archiveFileName = shadowJar.archiveFileName.get().replaceAll("-dev\\.jar\$", ".jar")
	addNestedDependencies = false
}

assemble.dependsOn(remapShadowJar)
